random_seed = 0;                // Seed for random number generator; use 0 to base on time.
Var pop_size = 1000;            // Local value variable.
Var num_bits = 100;             // Number of bits in each organism (and the NK landscape)
Var stop_update = 5000;         // How many updates should we run for?
Var print_step = 100;           // Interval for printing...

Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms

BitsOrg bits_org {              // Organism consisting of a series of N bits.
  output_name = "bits";         // Name of variable to contain bit sequence.
  N = num_bits;                 // Number of bits in organism
  mut_prob = 0.005;             // Probability of each bit mutating on reproduction.
  init_random = 0;              // Should we randomize ancestor?  (0 = all zeros)
};

EvalRoyalRoad eval_rr {         // Evaluate bitstrings by counting ones (or zeros).
  bits_trait = "bits";          // Which trait stores the bit sequence to evaluate?
  fitness_trait = "fitness";      // Which trait should we store Royal Road fitness in?
  brick_size = 8;               // Number of ones to have a whole brick in the road.
  extra_bit_cost = 0.5;         // Penalty per-bit for extra-long roads.
};

SelectTournament select_tourny { // Select the top fitness organisms from random subgroups for replication.
  tournament_size = 100;          // Number of orgs in each tournament
  fitness_fun = "fitness";    // Which trait provides the fitness value to use?
};

DataFile fit_file { filename="fitness.csv"; };
fit_file.ADD_COLUMN( "Average Fitness", "main_pop.CALC_MEAN('fitness')" );
fit_file.ADD_COLUMN( "Maximum Fitness", "main_pop.CALC_MAX('fitness')" );
fit_file.ADD_COLUMN( "Dominant Fitness", "main_pop.CALC_MODE('fitness')" );

DataFile max_file { filename="max_org.csv"; };
OrgList best_org;
max_file.ADD_SETUP( "best_org = main_pop.FIND_MAX('fitness')" );
max_file.ADD_COLUMN( "Fitness", "best_org.TRAIT('fitness')" );
max_file.ADD_COLUMN( "Genome", "best_org.TRAIT('bits')" );


@START() {
  PRINT("Beginning ROYAL ROAD!\nMain config options:");
  PRINT(" Brick size:       ", eval_rr.brick_size);
  PRINT(" Num org bits:     ", bits_org.N);
  PRINT(" Mut Probability:  ", bits_org.mut_prob);
  PRINT(" Population size:  ", pop_size);
  PRINT(" Tournamenet size: ", select_tourny.tournament_size);
  PRINT(" Random seed:      ", random_seed, "\n");
  PRINT(" Stop update:      ", stop_update, "\n");
  
  main_pop.INJECT("bits_org", pop_size);       // Inject starting population.
}

// Actions to perform every update.

@UPDATE(Var ud) {
  IF (ud == stop_update) EXIT();

  eval_rr.EVAL(main_pop);

IF (ud % print_step == 0) {
     PRINT("UD:", GET_UPDATE(),
           "  MainPopSize=", main_pop.SIZE(),
           "  AveFitness=", main_pop.CALC_MEAN("fitness"),
           "  MaxFitness=", main_pop.CALC_MAX("fitness"),
     );
     fit_file.WRITE();
     max_file.WRITE();
  }

  OrgList tourny_offspring = select_tourny.SELECT(main_pop, next_pop, pop_size);
  main_pop.REPLACE_WITH(next_pop);
}
