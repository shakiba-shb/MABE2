random_seed = 2;                // Seed for random number generator; use 0 to base on time.
Population main_pop;            // Collection of organisms
Population next_pop;            // Collection of organisms
Var pop_size = 100;              // Constant population size 
Var num_gens = 500;              // Number of generations to run 

AvidaGPOrg avida_org {          // Organism consisting of Avida instructions.
  mut_prob = 0.01;              // Probability of each instruction mutating on reproduction.
  N = 50;                       // Initial number of instructions in genome
  init_random = 1;              // Should we randomize ancestor?  (0 = "blank" default)
  eval_time = 200;              // How many CPU cycles should we give organisms to run?
  input_name = "input";         // Where to find inputs
  output_name = "output";       // Where to write outputs
};

EvalMancala eval_mancala {      // Evaluate organisms on their ability to play Mancala.
  input_trait = "input";        // Into which trait should input values be placed?
  output_trait = "output";      // Out of which trait should output values be read?
  scoreA_trait = "scoreA";      // Trait to save score for this player.
  scoreB_trait = "scoreB";      // Trait to save score for opponent.
  error_trait = "num_errors";   // Trait to count number of illegal moves attempted.
  fitness_trait = "fitness";    // Trait with combined success rating.
  opponent_type = "random";     // Which type of opponent should organisms face?
                                //  random: Always choose a random, legal move.
                                //  ai: Human supplied (but not very good) AI
                                //  random_org: Pick another random organism from collection.
};

SelectTournament select_t {     // Select the top fitness organisms from random subgroups for replication.
  tournament_size = 7;          // Number of orgs in each tournament
  fitness_fun = "fitness";      // Which trait provides the fitness value to use?
};

@START() {
  PRINT("random_seed = ", random_seed, "\n");  // Print seed at run start.
  main_pop.INJECT("avida_org", pop_size);       // Inject starting population.
};

// Actions to perform every update.

// @UPDATE(Var ud IN [100:100]) OrgList altruists = main_pop.FILTER("altruism > 0");
// @BEFOREDIVIDE(OrgList parent IN altruists) PRINT("Altruist Birth!");

@UPDATE(Var ud) {
  // @UPDATE(Var update) {
  // IF ([10:10].HAS(update)) EXIT();
  // IF (update == 1000) EXIT;

  eval_mancala.EVAL(main_pop);
  PRINT("UD:", GET_UPDATE(),
        "  MainPopSize=", main_pop.SIZE(),
        "  AveFitness=", main_pop.CALC_MEAN("fitness"),
        "  MaxFitness=", main_pop.CALC_MAX("fitness")
       );

  OrgList tourny_offspring = select_t.SELECT(main_pop, next_pop, pop_size);
  main_pop.REPLACE_WITH(next_pop);
};

@UPDATE(Var ud2) IF (ud2 == num_gens) EXIT();
